
import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Button } from '@/components/ui/button';
import { AlertTriangle, Eye, Clock, ExternalLink } from 'lucide-react';

interface Vulnerability {
  id: string;
  txid: string;
  type: 'r_reuse' | 'address_reuse' | 'dust_attack' | 'non_standard' | 'op_return_spam';
  severity: 'critical' | 'high' | 'medium' | 'low';
  timestamp: Date;
  description: string;
  details: string;
  amount?: number;
  address?: string;
}

const VulnerabilityFeed = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [isLive, setIsLive] = useState(true);

  // Simulate real-time vulnerability detection
  useEffect(() => {
    const mockVulnerabilities: Omit<Vulnerability, 'id' | 'timestamp'>[] = [
      {
        txid: 'bc1qa5wkgaew2dkv56kfvj5x7epdj4zyrhfx5x7a',
        type: 'r_reuse',
        severity: 'critical',
        description: 'ECDSA R-value reuse detected',
        details: 'Two signatures with identical R values found. Private key may be compromised.',
        amount: 0.05,
      },
      {
        txid: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa8Qx',
        type: 'address_reuse',
        severity: 'high',
        description: 'Address reuse pattern detected',
        details: 'High-value address used 15+ times, compromising privacy.',
        address: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',
        amount: 2.1,
      },
      {
        txid: '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy',
        type: 'dust_attack',
        severity: 'medium',
        description: 'Dust attack vector identified',
        details: 'Multiple 546 satoshi outputs to active addresses.',
        amount: 0.00000546,
      },
      {
        txid: 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh',
        type: 'non_standard',
        severity: 'high',
        description: 'Non-standard script detected',
        details: 'Unusual scriptPubKey pattern not matching standard types.',
      },
      {
        txid: '4f47af4109c6b51b2b1a8b41b5d9c4f0ee7b83c7',
        type: 'op_return_spam',
        severity: 'low',
        description: 'OP_RETURN spam detected',
        details: 'Excessive OP_RETURN data usage for spam purposes.',
      },
    ];

    const interval = setInterval(() => {
      if (isLive && Math.random() > 0.7) {
        const newVuln = mockVulnerabilities[Math.floor(Math.random() * mockVulnerabilities.length)];
        const vulnerability: Vulnerability = {
          ...newVuln,
          id: Math.random().toString(36).substr(2, 9),
          timestamp: new Date(),
        };
        
        setVulnerabilities(prev => [vulnerability, ...prev.slice(0, 19)]);
      }
    }, 3000);

    return () => clearInterval(interval);
  }, [isLive]);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-600';
      case 'high': return 'bg-amber-500';
      case 'medium': return 'bg-blue-500';
      case 'low': return 'bg-green-600';
      default: return 'bg-gray-500';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'r_reuse': return '🔐';
      case 'address_reuse': return '🔄';
      case 'dust_attack': return '💨';
      case 'non_standard': return '⚠️';
      case 'op_return_spam': return '📝';
      default: return '🔍';
    }
  };

  return (
    <Card className="bg-slate-800/50 border-slate-700">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-white flex items-center">
            <AlertTriangle className="mr-2 h-5 w-5 text-red-400" />
            Live Vulnerability Feed
          </CardTitle>
          <div className="flex items-center space-x-2">
            <div className={`w-2 h-2 rounded-full ${isLive ? 'bg-green-400 animate-pulse' : 'bg-red-400'}`} />
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsLive(!isLive)}
              className="text-slate-300 border-slate-600"
            >
              {isLive ? 'Pause' : 'Resume'}
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-96">
          <div className="space-y-4">
            {vulnerabilities.length === 0 ? (
              <div className="text-center py-8 text-slate-400">
                <Eye className="mx-auto h-12 w-12 mb-4 opacity-50" />
                <p>Monitoring blockchain for vulnerabilities...</p>
                <p className="text-sm mt-2">New findings will appear here in real-time</p>
              </div>
            ) : (
              vulnerabilities.map((vuln) => (
                <div
                  key={vuln.id}
                  className="p-4 bg-slate-700/30 border border-slate-600/50 rounded-lg hover:bg-slate-700/50 transition-colors"
                >
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      <span className="text-lg">{getTypeIcon(vuln.type)}</span>
                      <Badge className={`${getSeverityColor(vuln.severity)} text-white text-xs`}>
                        {vuln.severity.toUpperCase()}
                      </Badge>
                    </div>
                    <div className="flex items-center text-xs text-slate-400">
                      <Clock className="mr-1 h-3 w-3" />
                      {vuln.timestamp.toLocaleTimeString()}
                    </div>
                  </div>
                  
                  <h4 className="text-white font-medium mb-1">{vuln.description}</h4>
                  <p className="text-sm text-slate-300 mb-2">{vuln.details}</p>
                  
                  <div className="flex items-center justify-between text-xs">
                    <div className="space-y-1">
                      <div className="text-slate-400">
                        TX: <span className="text-slate-200 font-mono">{vuln.txid.slice(0, 20)}...</span>
                      </div>
                      {vuln.amount && (
                        <div className="text-slate-400">
                          Amount: <span className="text-orange-400">{vuln.amount} BTC</span>
                        </div>
                      )}
                      {vuln.address && (
                        <div className="text-slate-400">
                          Address: <span className="text-slate-200 font-mono">{vuln.address.slice(0, 15)}...</span>
                        </div>
                      )}
                    </div>
                    <Button variant="ghost" size="sm" className="text-slate-400 hover:text-white">
                      <ExternalLink className="h-3 w-3 mr-1" />
                      Details
                    </Button>
                  </div>
                </div>
              ))
            )}
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityFeed;
