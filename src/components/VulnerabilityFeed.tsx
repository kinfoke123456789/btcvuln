
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Button } from '@/components/ui/button';
import { AlertTriangle, Eye, Clock, ExternalLink, Loader2 } from 'lucide-react';
import { useVulnerabilities } from '@/hooks/useVulnerabilities';

const VulnerabilityFeed = () => {
  const [isLive, setIsLive] = useState(true);
  const { data: vulnerabilities = [], isLoading, error } = useVulnerabilities();

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-600';
      case 'high': return 'bg-amber-500';
      case 'medium': return 'bg-blue-500';
      case 'low': return 'bg-green-600';
      default: return 'bg-gray-500';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'r_reuse': return '🔐';
      case 'address_reuse': return '🔄';
      case 'dust_attack': return '💨';
      case 'non_standard': return '⚠️';
      case 'op_return_spam': return '📝';
      default: return '🔍';
    }
  };

  if (error) {
    return (
      <Card className="bg-slate-800/50 border-slate-700">
        <CardContent className="p-6">
          <div className="text-center text-red-400">
            <AlertTriangle className="mx-auto h-12 w-12 mb-4" />
            <p>Error loading vulnerabilities</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-slate-800/50 border-slate-700">
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle className="text-white flex items-center">
            <AlertTriangle className="mr-2 h-5 w-5 text-red-400" />
            Live Vulnerability Feed
          </CardTitle>
          <div className="flex items-center space-x-2">
            <div className={`w-2 h-2 rounded-full ${isLive ? 'bg-green-400 animate-pulse' : 'bg-red-400'}`} />
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsLive(!isLive)}
              className="text-slate-300 border-slate-600"
            >
              {isLive ? 'Pause' : 'Resume'}
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-96">
          <div className="space-y-4">
            {isLoading ? (
              <div className="text-center py-8 text-slate-400">
                <Loader2 className="mx-auto h-12 w-12 mb-4 animate-spin" />
                <p>Loading vulnerabilities...</p>
              </div>
            ) : vulnerabilities.length === 0 ? (
              <div className="text-center py-8 text-slate-400">
                <Eye className="mx-auto h-12 w-12 mb-4 opacity-50" />
                <p>No vulnerabilities found</p>
                <p className="text-sm mt-2">Database is ready for new scan results</p>
              </div>
            ) : (
              vulnerabilities.map((vuln) => (
                <div
                  key={vuln.id}
                  className="p-4 bg-slate-700/30 border border-slate-600/50 rounded-lg hover:bg-slate-700/50 transition-colors"
                >
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      <span className="text-lg">{getTypeIcon(vuln.vulnerability_type)}</span>
                      <Badge className={`${getSeverityColor(vuln.severity)} text-white text-xs`}>
                        {vuln.severity.toUpperCase()}
                      </Badge>
                    </div>
                    <div className="flex items-center text-xs text-slate-400">
                      <Clock className="mr-1 h-3 w-3" />
                      {new Date(vuln.created_at).toLocaleTimeString()}
                    </div>
                  </div>
                  
                  <h4 className="text-white font-medium mb-1">{vuln.description}</h4>
                  {vuln.details && (
                    <p className="text-sm text-slate-300 mb-2">{vuln.details}</p>
                  )}
                  
                  <div className="flex items-center justify-between text-xs">
                    <div className="space-y-1">
                      <div className="text-slate-400">
                        TX: <span className="text-slate-200 font-mono">{vuln.txid.slice(0, 20)}...</span>
                      </div>
                      {vuln.amount_btc && (
                        <div className="text-slate-400">
                          Amount: <span className="text-orange-400">{vuln.amount_btc} BTC</span>
                        </div>
                      )}
                      {vuln.address && (
                        <div className="text-slate-400">
                          Address: <span className="text-slate-200 font-mono">{vuln.address.slice(0, 15)}...</span>
                        </div>
                      )}
                    </div>
                    <Button variant="ghost" size="sm" className="text-slate-400 hover:text-white">
                      <ExternalLink className="h-3 w-3 mr-1" />
                      Details
                    </Button>
                  </div>
                </div>
              ))
            )}
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityFeed;
